//*****************************************************************************
//
// CPE 329-11
// Spring 2017
// Final Project - Visual Equalizer
//
// June 8, 2017
//
// Andrew Yoder
// Carlos Hernandez
//
//****************************************************************************


#include "msp.h"

void pins_init(void);
void timers_init(void);

void terminal_init(void);
void UART0_init(void);
void write_to_term(void);

int bands[7];               // stores frequency band values
unsigned int curBand = 0;   // integer representing band being updated
unsigned int newMeas = 0;   // Boolean updated when equalizer has new output
unsigned int i, j, k;
int start;


void main(void) {

    WDTCTL = WDTPW | WDTHOLD;           // Stop watchdog timer


   /* DCO setup */
    CS->KEY = CS_KEY_VAL;
    CS->CTL0 = 0;
    CS->CTL0 = CS_CTL0_DCORSEL_4;   // DCO = 24 MHz
    CS->CTL1 = CS_CTL1_SELA_2 | CS_CTL1_SELS_3 | CS_CTL1_SELM_3;
    CS->KEY = 0;


   /* PWM OUTPUT PINS */
    // Pins for TA0.4, 160kHz clock (P2.7)
    P2->DIR |= BIT7;
    P2->SEL1 &= ~BIT7;
    P2->SEL0 |= BIT7;

    // Pins for TA2.1, 700 Hz clock (P5.6)
    P5->DIR |= BIT6;
    P5->SEL1 &= ~BIT6;
    P5->SEL0 |= BIT6;

    // set P1.6 to interrupt on strobe falling edge
    P3->SEL1 &= ~BIT6;
    P3->SEL0 &= ~BIT6;
    P3->DIR &= ~BIT6;
    P3->REN |= BIT6;
    P3->OUT |= BIT6;
    P3->IES |= BIT6;   // interrupt on falling edge
    P3->IFG = 0;
    P3->IE |= BIT6;    // interrupt enable for strobe


    //test
    P4->SEL1 &= ~BIT6;
    P4->SEL0 &= ~BIT6;
    P4->DIR |= BIT6;
    P4->OUT &= ~BIT6;


    timers_init();


   /* ADC and interrupts configuration */
    // Sampling time, S&H=4, ADC14 on
    ADC14->CTL0 = ADC14_CTL0_SHT0_0 | ADC14_CTL0_SHP | ADC14_CTL0_ON | ADC14_CTL0_MSC | ADC14_CTL0_CONSEQ_2;
    ADC14->CTL1 = ADC14_CTL1_RES_2;         // Use sampling timer, 12-bit conversion results

    ADC14->MCTL[0] |= ADC14_MCTLN_INCH_15;  // A15 ADC input select; Vref=AVCC
    ADC14->IER0 |= ADC14_IER0_IE0;          // Enable ADC conv complete interrupt

    SCB->SCR &= ~SCB_SCR_SLEEPONEXIT_Msk;   // Wake up on exit from ISR

    // Start sampling/conversion
    ADC14->CTL0 |= ADC14_CTL0_ENC | ADC14_CTL0_SC;

    // Enable ADC interrupt in NVIC module
    NVIC->ISER[0] = 1 << ((ADC14_IRQn) & 31);
    NVIC->ISER[1] = 1 << ((PORT3_IRQn) & 31);


   /* initialize pins and components */
    pins_init();
    UART0_init();
    terminal_init();

   /* reset equalizer, (eq_rst on then off) */
    start = 1;

    // Enable global interrupt
    __enable_irq();


    while(1) {
        if (curBand == 0) {
            write_to_term();
        }
    }
}





void write_to_term(void)
{
    /* cursor home */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';


    /* position for band 1 update correct pos */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ';';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';

    //output band 1



    /* position for band 2 update correct pos */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '2';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ';';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';

    //output band 2




    /* position for band 3 update correct pos */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '3';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ';';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';

    //output band 3





    /* position for band 4 update correct pos */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ';';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';

    //output band 4





    /* position for band 5 update correct pos */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '5';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ';';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';

    //output band 5





    /* position for band 6 update correct pos */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '6';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ';';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';

    //output band 6






    /* position for band 7 update correct pos */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '7';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ';';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';

    //output band 7
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '|';
}


void ADC14_IRQHandler(void) {
    if (newMeas)
    {
        P4->OUT |= BIT6;  //testing
        bands[curBand] = ADC14->MEM[0] / 683;
        curBand++;
        if (curBand == 7) {
            curBand = 0;
        }
        newMeas = 0;
        P4->OUT &= ~BIT6; //testing
    }
}

void PORT3_IRQHandler(void) {
    P3->IFG &= ~BIT6;     // disable interrupt flag

    if (start == 0)
    {
        newMeas = 1;          // new measurement for ADC
    }
    else if(start == 1) //starting initial reset
    {
        P2->OUT |= BIT6;
        start = 2;
        //P4->OUT |= BIT6;  //testing
    }
    else if(start == 2) //finishing initial reset
    {
        P2->OUT &= ~BIT6;
        start = 0;
        curBand = 0;
        //P4->OUT &= ~BIT6;  //testing
    }
}


void timers_init(void) {
    // PWM timer 160 kHz clock, Timer A0.4 (P2.7)
    TIMER_A0->CCR[0] = 150;
    TIMER_A0->CCR[4] = 75;                        // toggle flag
    TIMER_A0->CCTL[4] = 0xE0;
    TIMER_A0->CTL = 0x0214;

    // PWM timer 700 Hz strobe, Timer A2.1 (P5.6)
    TIMER_A2->CCR[0] = 34286;
    TIMER_A2->CCR[1] = 17143;                        // toggle flag
    TIMER_A2->CCTL[1] = 0xE0;
    TIMER_A2->CTL = 0x0214;
}



void pins_init(void) {

   /* equalizer initialization */
    // rst from P2.6
    P2->DIR |= BIT6;

//    // vref from P5.6
//    P5->SEL1 |= BIT6;
//    P5->SEL0 |= BIT6;

    // analog from equalizer to P6.0
    P6->DIR &= ~BIT0;
    P6->SEL1 |= BIT0;
    P6->SEL0 |= BIT0;

   /* LCD initialization */
    // lcd_sce from P5.0
    P5->DIR |= BIT0;
    P5->OUT |= BIT0;   // active low, so set

    // lcd_rst from P2.4
    P2->DIR |= BIT4;
    P2->OUT &= ~BIT4;

    // lcd_dc from P5.2
    P5->DIR |= BIT2;
    P5->OUT &= ~BIT2;   // command low, data high

    //  SOMI, P1.6
    // direction controlled by eUSCI_B0 module
    P1->SEL0 |= BIT6 + BIT5;               // Configure P1.6 and P1.5 for UCB0SIMO and UCB0CLK
    P1->SEL1 &= ~(BIT6 + BIT5);            //
}



void terminal_init(void)
{
    /* clear */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '2';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'J';

    /* cursor home */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'H';

    /* "Band 1:    " */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'B';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'a';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'n';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'd';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '1';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ':';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    /* move to next line */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'E';


    /* "Band 2:    " */
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = 'B';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = 'a';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = 'n';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = 'd';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = '2';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ':';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';


    /* move to next line */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'E';


    /* "Band 3:    " */
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = 'B';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = 'a';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = 'n';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = 'd';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = '3';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ':';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';
        while (!(EUSCI_A0->IFG & 0x02)){}
        EUSCI_A0->TXBUF = ' ';

    /* move to next line */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'E';


    /* "Band 4:    " */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'B';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'a';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'n';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'd';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '4';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ':';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    /* move to next line */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'E';


    /* "Band 5:    " */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'B';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'a';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'n';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'd';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '5';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ':';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    /* move to next line */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'E';


    /* "Band 6:    " */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'B';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'a';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'n';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'd';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '6';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ':';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    /* move to next line */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x1B;       // esc
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 0x5B;       // [
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'E';


    /* "Band 7:    " */
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'B';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'a';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'n';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = 'd';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = '7';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ':';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';

    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';
    while (!(EUSCI_A0->IFG & 0x02)){}
    EUSCI_A0->TXBUF = ' ';


}

void UART0_init(void)
{
    EUSCI_A0->CTLW0 = 0;        // reset
    EUSCI_A0->CTLW0 |= EUSCI_A_CTLW0_SWRST;

    EUSCI_A0->CTLW0 |= EUSCI_A_CTLW0_SSEL__SMCLK | EUSCI_A_CTLW0_MSB;   // use SMCLK and MSB first

    EUSCI_A0->BRW = 104;        // baud rate 115 200 bps (24 000 000 / 115 200)

    P1->SEL0 |= 0x0C;
    P1->SEL1 &= ~0x0C;

    EUSCI_A0->CTLW0 &= ~EUSCI_A_CTLW0_SWRST;  // disable reset
}

