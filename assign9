//*****************************************************************************
// Assignment 9 - Pulse With Modulation and Servos
//
// Andrew Yoder, Carlos Hernandez
// May 30, 2017
//****************************************************************************

#include "msp.h"
#define CONST_INCR 60000   // min 20ms delay between pulses

void keypad_init(void);
int keypad_getkey(void);
void delay(void);
void updatePos(int n);
void updateWidth(void);

int secDig = 0;   // boolean, true if input is second digit
int curSpot = 0;  // keep track of current servo position
int newSpot = 0;  // variable to store new servo position


int main(void)
{
    int key;

    TIMER_A2->CCTL[0] = TIMER_A_CCTLN_CCIE; // TACCR0 interrupt enabled
    TIMER_A2->CCR[0] = CONST_INCR;  // reset flag
    TIMER_A2->CCR[1] = CONST_INCR - 2252;  // set flag
    TIMER_A2->CTL = TIMER_A_CTL_SSEL__SMCLK | // SMCLK, continuous mode, set/reset
               TIMER_A_CTL_MC__CONTINUOUS | TIMER_A_CCTLN_OUTMOD_3;


    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;   // Stop watchdog timer

    // DCO = 3 MHz, SMCLK and MCLK = DCO
    CS->KEY = CS_KEY_VAL;
    CS->CTL0 = 0;
    CS->CTL0 = CS_CTL0_DCORSEL_2;   // DCO = 3 MHz
    CS->CTL1 = CS_CTL1_SELA_2 | CS_CTL1_SELS_3 | CS_CTL1_SELM_3;
    CS->KEY = 0;

    keypad_init();

    // Enable global interrupt
//    __enable_irq();
//
//    NVIC->ISER[0] = 1 << ((TA0_0_IRQn) & 31);



    while (1) {
        key = keypad_getkey();
        if (key > 0) {
            updatePos(key);
        }
        updateWidth();
    }

}


// update the position of the servo
void updatePos(int input) {
    if (input == 11) {
            input = 0;
        }
    if (input < 10) {
        if (!secDig) {
            newSpot += 10*input;
            secDig = 1;
        } else {
            newSpot += input;
            curSpot = newSpot;
            newSpot = 0;
            secDig = 0;
        }
    } else {
        if (input == 10) {
            curSpot -= 1;
            newSpot = 0;
            secDig = 0;
        } else if (input == 12) {
            curSpot += 1;
            newSpot = 0;
            secDig = 0;
        }
    } if (curSpot < 0) {
        curSpot = 0;
    } else if (curSpot > 18) {
        curSpot = 18;
    }
}


// update pulse width
void updateWidth(void) {
    TIMER_A2->CCR[1] = CONST_INCR - (2252 + (250*curSpot));
}


//// Timer A2 ISR
//void TA2_0_IRQHandler(void) {
//
//    TIMER_A2->CCTL[0] &= ~TIMER_A_CCTLN_CCIFG;
//
//
//    TIMER_A2->CCR[1] +=
//    TIMER_A2->CCR[0] += CONST_INCR;
//}


int keypad_getkey(void)
{
    int row, col;
    const char row_select[] = {0x10, 0x20, 0x40, 0x80};  /* one row is active */

    /* check to see if a key is pressed */
    P2->DIR |= 0xF0;
    P2->OUT &= ~0xF0;
    delay();
    col = P3->IN & 0xE0;
    P2->OUT |= 0xF0;
    P2->DIR &= ~0xF0;
    if (col == 0xE0)
        return 0;

    /* if a key is pressed, this finds out which key */
    for (row = 0; row < 4; row++)
    {
        P2->DIR &= 0xF0;
        P2->DIR |= row_select[row];
        P2->OUT &= ~row_select[row];
        delay();
        col = P3->IN & 0xE0;
        P2->OUT |= row_select[row];
        if (col != 0xE0)
            break;
    }
    P2->OUT |= 0xF0;
    P2->DIR &= 0xF0;
    if (row == 4)
        return 0;


    if (col == 0xC0) return row * 3 + 1;   /* key in column G */
    if (col == 0xA0) return row * 3 + 2;   /* key in column F */
    if (col == 0x60) return row * 3 + 3;   /* key in column E */

    return 0;
}


/* This function initializes the column pins.
 * All pins are configured as GPIO input pins. The column pins have
 * the pull-up resistors enabled.
 */
void keypad_init(void)
{
    /* column E, F, G */
    P3->DIR &= ~BIT5 | ~BIT6 | ~BIT7;
    P3->REN |= BIT5 | BIT6 | BIT7;   /* enable pull-up resistor for column E pins */
    P3->OUT |= BIT5 | BIT6 | BIT7;   /* make column pins pull-ups */
    P2->DIR &= 0x0F;
    P2->REN &= 0x0F;
    P2->OUT &= 0x0F;
}


/* make a small delay */
void delay(void) {
}
