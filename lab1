/* p2_1.c Toggling green LED in C using header file register definitions.
 * This program toggles green LED for 0.5 second ON and 0.5 second OFF.
 * The green LED is connected to P2.1.
 * The LEDs are high active (a '1' turns ON the LED).
 *
 * Tested with Keil 5.20 and MSP432 Device Family Pack V2.2.0
 * on XMS432P401R Rev C.
 */

#include "msp.h"
#define FREQ_1500_kHz 0
#define FREQ_3_MHz 1
#define FREQ_6_MHz 2
#define FREQ_12_MHz 3
#define FREQ_24_MHz 4
#define FREQ_48_MHz 5

void set_DCO(int freq);
void delayMs(int n, int freq);
void delayNs(int n, int freq);

int curFreq;

int main(void) {
    P2->SEL1 &= ~2;         /* configure P2.1 as simple I/O */
    P2->SEL0 &= ~2;
    P2->DIR |= 2;           /* P2.1 set as output pin */
    
    set_DCO(FREQ_3_MHz);

    while (1) {
        P2->OUT |= 2;       /* turn on P2.1 green LED */
        delayMs(500, FREQ_3_MHz);
        P2->OUT &= ~2;      /* turn off P2.1 green LED */
        delayMs(500, FREQ_3_MHz);
    }
}


/* change the clock cycle */
void set_DCO(int freq) {

    // change DC0 from default of 3MHz to 12MHz.
    CS->KEY = CS_KEY_VAL; // unlock CS registers
    CS->CTL0 = 0; // clear register CTL0

    if (freq == 0) CS->CTL0 = CS_CTL0_DCORSEL_0; // set DCO = 1.5 MHz
    if (freq == 1) CS->CTL0 = CS_CTL0_DCORSEL_1; // set DCO = 3 MHz
    if (freq == 2) CS->CTL0 = CS_CTL0_DCORSEL_2; // set DCO = 6 MHz
    if (freq == 3) CS->CTL0 = CS_CTL0_DCORSEL_3; // set DCO = 12 MHz
    if (freq == 4) CS->CTL0 = CS_CTL0_DCORSEL_4; // set DCO = 24 MHz
    if (freq == 5) CS->CTL0 = CS_CTL0_DCORSEL_5; // set DCO = 48 MHz

    CS->CTL1 = CS_CTL1_SELA_2 | CS_CTL1_SELS_3 | CS_CTL1_SELM_3; // select clock sources
    CS->KEY = 0; // lock the CS registers
}


/* delay milliseconds */
void delayMs(int n, int freq) {

    int i, j;
    int numOfCycles = 750;                  /* (1.5*(2^freq))*250; */

    for (j = 0; j < n; j++)
        for (i = numOfCycles; i > 0; i--);      /* Delay 1 ms*/
}


/* delay nanoseconds */
void delayNs(int n, int freq) {

    int j;
    float numOfCycles = (1.5*(2^freq))*0.00025;

    for (j = 0; (float)j < n*numOfCycles; j++);
        //for (i = numOfCycles; i > 0; i--);      /* Delay 1 ns*/
}
