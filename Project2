//*****************************************************************************
// P2.C
//
// function generator
//****************************************************************************

#include "msp.h"
#define CONST_INCR 101*10 //ms in cycle
#define offset 630*1      // in volts
#define volts 2

void Drive_DAC(unsigned int level);
void delay(void);
void keypad_init(void);
char keypad_getkey(void);

volatile unsigned int TempDAC_Value = offset;
unsigned int slope = 1;
unsigned int waveform = 2;
unsigned int count = 0;
unsigned int max = 630*volts;

const char SineTable120[] =
{ 128,
  134,
  141,
  147,
  154,
  160,
  167,
  173,
  179,
  185,
  191,
  197,
  202,
  208,
  213,
  218,
  222,
  227,
  231,
  234,
  238,
  241,
  244,
  247,
  249,
  251,
  252,
  253,
  254,
  255,
  255,
  255,
  254,
  253,
  252,
  251,
  249,
  247,
  244,
  241,
  238,
  234,
  231,
  227,
  222,
  218,
  213,
  208,
  202,
  197,
  191,
  185,
  179,
  173,
  167,
  160,
  154,
  147,
  141,
  134,
  128,
  121,
  114,
  108,
  101,
  95,
  88,
  82,
  76,
  70,
  64,
  58,
  53,
  47,
  42,
  37,
  33,
  28,
  24,
  21,
  17,
  14,
  11,
  8,
  6,
  4,
  3,
  2,
  1,
  0,
  0,
  0,
  1,
  2,
  3,
  4,
  6,
  8,
  11,
  14,
  17,
  21,
  24,
  28,
  33,
  37,
  42,
  47,
  53,
  58,
  64,
  70,
  76,
  82,
  88,
  95,
  101,
  108,
  114,
  121
};




int main(void)
{

    keypad_init();

    TIMER_A0->CCTL[0] = TIMER_A_CCTLN_CCIE; // TACCR0 interrupt enabled
     TIMER_A0->CCR[0] = CONST_INCR;
     TIMER_A0->CTL = TIMER_A_CTL_SSEL__SMCLK | // SMCLK, continuous mode
               TIMER_A_CTL_MC__CONTINUOUS;



  WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;   // Stop watchdog timer

  // DCO = 24 MHz, SMCLK and MCLK = DCO
  CS->KEY = CS_KEY_VAL;
  CS->CTL0 = 0;
  CS->CTL0 = CS_CTL0_DCORSEL_4;   // DCO = 24 MHz
  CS->CTL1 = CS_CTL1_SELA_2 | CS_CTL1_SELS_3 | CS_CTL1_SELM_3;
  CS->KEY = 0;

  // Configure port bits for SPI
  P5->DIR |= BIT1;                     // Will use BIT4 to activate /CE on the DAC


  P1SEL0 |= BIT6 + BIT5;               // Configure P1.6 and P1.5 for UCB0SIMO and UCB0CLK
  P1SEL1 &= ~(BIT6 + BIT5);            //

  // SPI Setup
  EUSCI_B0->CTLW0 |= EUSCI_B_CTLW0_SWRST;   // Put eUSCI state machine in reset

  EUSCI_B0->CTLW0 = EUSCI_B_CTLW0_SWRST |   // Remain eUSCI state machine in reset
                    EUSCI_B_CTLW0_MST   |   // Set as SPI master
                    EUSCI_B_CTLW0_SYNC  |   // Set as synchronous mode
                    EUSCI_B_CTLW0_CKPL  |   // Set clock polarity high
                    EUSCI_B_CTLW0_MSB;      // MSB first

  EUSCI_B0->CTLW0 |= EUSCI_B_CTLW0_SSEL__SMCLK; // SMCLK
  EUSCI_B0->BRW = 0x01;                         // divide by 16, clock = fBRCLK/(UCBRx)
  EUSCI_B0->CTLW0 &= ~EUSCI_B_CTLW0_SWRST;      // Initialize USCI state machine, SPI
                                                // now waiting for something to
                                                // be placed in TXBUF

  EUSCI_B0->IFG |= EUSCI_B_IFG_TXIFG;  // Clear TXIFG flag

  // Enable global interrupt
  __enable_irq();

  NVIC->ISER[0] = 1 << ((TA0_0_IRQn) & 31);



  while (1) {

        Drive_DAC(TempDAC_Value);

  }

} // end of main


void Drive_DAC(unsigned int level){
  unsigned int DAC_Word = 0;
  int i;

  DAC_Word = (0x1000) | (level & 0x0FFF);   // 0x1000 sets DAC for Write
                                            // to DAC, Gain = 2, /SHDN = 1
                                            // and put 12-bit level value
                                            // in low 12 bits.

  P5->OUT &= ~BIT1;                                   // Clear P4.1 (drive /CS low on DAC)
                                                      // Using a port output to do this for now

  EUSCI_B0->TXBUF = (unsigned char) (DAC_Word >> 8);  // Shift upper byte of DAC_Word
                                                      // 8-bits to right

  while (!(EUSCI_B0->IFG & EUSCI_B_IFG_TXIFG));              // USCI_A0 TX buffer ready?
     EUSCI_B0->TXBUF = (unsigned char) (DAC_Word & 0x00FF);  // Transmit lower byte to DAC

  while (!(EUSCI_B0->IFG & EUSCI_B_IFG_TXIFG));      // Poll the TX flag to wait for completion

  for(i = 200; i > 0; i--);                          // Delay 200 16 MHz SMCLK periods
                                                     //to ensure TX is complete by SIMO

  P5->OUT |= BIT1;                                   // Set P4.1   (drive /CS high on DAC)

  return;
}


/* This function initializes the column pins.
 * All pins are configured as GPIO input pins. The column pins have
 * the pull-up resistors enabled.
 */
void keypad_init(void)
{
    /* column E, F */
    P5->DIR &= ~BIT6 | ~BIT7;
    P5->REN |= BIT6 | BIT7;   /* enable pull-up resistor for column E pins */
    P5->OUT |= BIT6 | BIT7;   /* make column pins pull-ups */
    /* column G */
    P3->DIR &= ~BIT0;
    P3->REN |= BIT0;   /* enable pull-up resistor for column G pins */
    P3->OUT |= BIT0;   /* make column pins pull-ups */
}


char keypad_getkey(void)
{
    int row, col;
    const char row_select[] = {0x20, 0x40, 0x80};  /* one row is active */

    /* check to see if a key is pressed */
    P2->DIR |= 0xF0;
    P2->OUT &= ~0xF0;
    delay();
    col = P2->IN & 0x0F;
    P2->OUT |= 0xF0;
    P2->DIR &= ~0xF0;
    if (col == 0x0F)
        return 0;

    /* if a key is pressed, this finds out which key */
    for (row = 0; row < 3; row++)
    {
        P3->DIR &= 0xF0;
        P3->DIR |= row_select[row];
        P3->OUT &= ~row_select[row];
        delay();
        col = P3->IN & 0xF0;
        P2->OUT |= row_select[row];
        if (col != 0xF0)
            break;
    }
    P2->OUT |= 0xF0;
    P2->DIR &= 0xF0;
    if (row == 3)
        return 0;

    if (col == 0xD0) return row * 4 + 1;   /* key in column G */
    if (col == 0xB0) return row * 4 + 2;   /* key in column F */
    if (col == 0x70) return row * 4 + 3;   /* key in column E */

    return 0;
}

/* make a small delay */
void delay(void) {
}

// Timer A0 interrupt service routine

void TA0_0_IRQHandler(void) {


    TIMER_A0->CCTL[0] &= ~TIMER_A_CCTLN_CCIFG;

      // 1200 = around 2 volts


      if (TempDAC_Value == max + offset )
      {
          slope = 0;
      }
      if (TempDAC_Value == offset)
      {
          slope = 1;
      }

      if (slope == 1)
      {
          if (waveform == 0)
          {
              TempDAC_Value += max/120;            // triangular waveform
          }

      }
      else
      {
          if (waveform == 0)
          {
              TempDAC_Value -= max/120;            // triangular waveform
          }
       }


      if (waveform == 1)
      {
          count++;
          if (count == 120)
          {
              count = 0;
              if (TempDAC_Value == max + offset)            // square waveform
                  TempDAC_Value = offset;
              else
                  TempDAC_Value = max + offset;
          }

      }

       if (waveform == 2)
       {
          TempDAC_Value = offset + SineTable120[count/2] * (max/240);
          count++;
          if (count == 240)
              count = 0;
       }

      TIMER_A0->CCR[0] += CONST_INCR;

}
