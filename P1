#include "msp.h"
#include <stdlib.h>
#include <stdio.h>

#define RS 0x20       /* p3.5 mask */
#define RW 0x40       /* p3.6 mask */
#define EN 0x80       /* p3.7 mask */

#define FREQ_1500_kHz 150
#define FREQ_3_MHz 300
#define FREQ_6_MHz 600
#define FREQ_12_MHz 1200
#define FREQ_24_MHz 2400
#define FREQ_48_MHz 4800

void delay(void);
void LCD_command(unsigned char command);
void LCD_data(unsigned char data);
void LCD_init(void);
void keypad_init(void);
char keypad_getkey(void);
void LED_init(void);
void LED_set(int value);
void set_DCO(int freq);
void delayMs(int n, int u);

int main(void) {

    unsigned char key[4];
    int unlocked = 0, index = 0;

    set_DCO(FREQ_3_MHz);
    LCD_init();
    keypad_init();
    LED_init();

    do {
        LCD_command(0x1);         /* clear display*/
        delay();
        LCD_command(0x80);        /* cursor at beginning of 1st line */
        LCD_data(0x4C);  // L
        LCD_data(0x4F);  // O
        LCD_data(0x43);  // C
        LCD_data(0x4B);  // K
        LCD_data(0x45);  // E
        LCD_data(0x44);  // D

        LCD_command(0xC0);      /* cursor at beginning of 2nd line */

        LCD_data(0x45);  // E
        LCD_data(0x4E);  // N
        LCD_data(0x54);  // T
        LCD_data(0x45);  // E
        LCD_data(0x52);  // R

        LCD_data(0x20);  // ' '

        LCD_data(0x4B);  // K
        LCD_data(0x45);  // E
        LCD_data(0x59);  // Y
        delay();

        while (index < 4)
        {
            key[index] = keypad_getkey();
            LED_set(key);
            if (key[index] == '*')
            {
                key = NULL;
                break;
            }
            else
            {
                index++;
            }
        }

        unlocked = lockStatus(key);
    } while (!unlocked);

    while (unlocked) {
        LCD_command(0x1);         /* clear display*/
        delay();
        LCD_command(0x80);        /* cursor at beginning of 1st line */
        LCD_data(0x48);  // H
        LCD_data(0x45);  // E
        LCD_data(0x4C);  // L
        LCD_data(0x4C);  // L
        LCD_data(0x4F);  // O

        LCD_data(0x20);  // ' '

        LCD_data(0x57);  // W
        LCD_data(0x4F);  // O
        LCD_data(0x52);  // R
        LCD_data(0x4C);  // L
        LCD_data(0x44);  // D
    }
}

int lockStatus(unsigned char key[]) {

    /* 4-part combination lock all match */

    unsigned char password_char[4];
    get_password_code(password_char);

    if (key[0] == password_char[0] && key[1] == password_char[1] && key[2] == password_char[2] && key[3] == password_char[3])
        return 1;
    return 0;

}


void get_password_code( unsigned char password_char[])
{
    password_char[0] = '1';
    password_char[1] = '2';
    password_char[2] = '3';
    password_char[3] = '4';

}


void LCD_init(void) {
    P3->DIR |= RS | RW | EN;  /* make P3 pins output for control data */
    P4->DIR = 0xFF;           /* make P4 pins output for data */

    delayMs(30, FREQ_3_MHz);              /* initialization sequence */
    LCD_command(0x30);
    delayMs(10, FREQ_3_MHz);
    LCD_command(0x30);
    delayMs(1, FREQ_3_MHz);
    LCD_command(0x30);

    LCD_command(0x38);    /* set 8-bit data, 2-line, 5x7 font */
    LCD_command(0x06);    /* move cursor right after each char */
    LCD_command(0x01);    /* clear screen, move cursor to home */
    LCD_command(0x0F);    /* turn on display, cursor blinking */
}

void LCD_command(unsigned char command)
{
    P3->OUT &= ~(RS | RW );  /* RS = 0, R/W = 0 */
    P4->OUT = command;       /* put command on data bus */
    P3->OUT |= EN;           /* pulse E high */
    delayMs(0, FREQ_3_MHz);
    P3->OUT &= ~EN;          /* clear E */
    if (command < 4)
        delayMs(4, FREQ_3_MHz);          /* command 1 and 2 need up to 1.64 ms */
    else
        delayMs(1, FREQ_3_MHz);          /* all others 40 us */
}

void LCD_data(unsigned char data)
{
    P3->OUT |= RS;    /* RS = 1 */
    P3->OUT &= ~RW;   /* R/W = 0 */
    P4->OUT = data;   /* put data on bus */
    P3->OUT |= EN;    /* pulse E */
    delayMs(0, FREQ_3_MHz);
    P3->OUT &= ~EN;   /* clear E */
    delayMs(1, FREQ_3_MHz);       /* wait for controller to do the display */
}

/* This function initializes the column pins.
 * All pins are configured as GPIO input pins. The column pins have
 * the pull-up resistors enabled.
 */
void keypad_init(void)
{
    /* column E, F */
    P5->DIR &= ~BIT6 | ~BIT7;
    P5->REN |= BIT6 | BIT7;   /* enable pull-up resistor for column E pins */
    P5->OUT |= BIT6 | BIT7;   /* make column pins pull-ups */
    /* column G */
    P3->DIR &= ~BIT0;
    P3->REN |= BIT0;   /* enable pull-up resistor for column G pins */
    P3->OUT |= BIT0;   /* make column pins pull-ups */
}


char keypad_getkey(void)
{
    int row, col;
    const char row_select[] = {0x20, 0x40, 0x80};  /* one row is active */

    /* check to see if a key is pressed */
    P2->DIR |= 0xF0;
    P2->OUT &= ~0xF0;
    delay();
    col = P2->IN & 0x0F;
    P2->OUT |= 0xF0;
    P2->DIR &= ~0xF0;
    if (col == 0x0F)
        return 0;

    /* if a key is pressed, this finds out which key */
    for (row = 0; row < 3; row++)
    {
        P3->DIR &= 0xF0;
        P3->DIR |= row_select[row];
        P3->OUT &= ~row_select[row];
        delay();
        col = P3->IN & 0xF0;
        P2->OUT |= row_select[row];
        if (col != 0xF0)
            break;
    }
    P2->OUT |= 0xF0;
    P2->DIR &= 0xF0;
    if (row == 3)
        return 0;

    if (col == 0xD0) return row * 4 + 1;   /* key in column G */
    if (col == 0xB0) return row * 4 + 2;   /* key in column F */
    if (col == 0x70) return row * 4 + 3;   /* key in column E */

    return 0;
}



/* initialize the RGB LED */
void LED_init(void)
{
    P2->DIR = 0x07;     /* make LED pins output */
    P2->OUT &= ~0x07;   /* turn the LEDs off */
}

void LED_set(int value)
{
    value &= 0x07;
    P2->OUT = (P2->OUT & ~0x07) | value;
}

/* make a small delay */
void delay(void) {
}

/* delay milliseconds with varying frequencies */
void delayMs(int n, int freq) {
    int i, j;

    for (j = 0; j < n; j++)
        for (i = freq; i > 0; i--);      /* Delay 1 ms*/
}

/* change the clock cycle */
void set_DCO(int freq) {
    // change DC0 from default of 3MHz to 12MHz.
    CS->KEY = CS_KEY_VAL; // unlock CS registers
    CS->CTL0 = 0; // clear register CTL0

    if (freq == 150) CS->CTL0 = CS_CTL0_DCORSEL_0; // set DCO = 1.5 MHz
    else if (freq == 300) CS->CTL0 = CS_CTL0_DCORSEL_1; // set DCO = 3 MHz
    else if (freq == 600) CS->CTL0 = CS_CTL0_DCORSEL_2; // set DCO = 6 MHz
    else if (freq == 1200) CS->CTL0 = CS_CTL0_DCORSEL_3; // set DCO = 12 MHz
    else if (freq == 2400) CS->CTL0 = CS_CTL0_DCORSEL_4; // set DCO = 24 MHz
    else if (freq == 4800) CS->CTL0 = CS_CTL0_DCORSEL_5; // set DCO = 48 MHz

    CS->CTL1 = CS_CTL1_SELA_2 | CS_CTL1_SELS_3 | CS_CTL1_SELM_3; // select clock sources
    CS->KEY = 0; // lock the CS registers
}
